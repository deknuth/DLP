
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000040  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d8  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000142  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f1  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c7  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000098  00000000  00000000  0000079f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	2a d0       	rcall	.+84     	; 0x96 <main>
  42:	3f c0       	rjmp	.+126    	; 0xc2 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <PortInit>:

#define BAUD	38400

void PortInit(void)
{
    DDRB = 0B00000000;
  46:	14 b8       	out	0x04, r1	; 4
    PORTB= 0B00000000;
  48:	15 b8       	out	0x05, r1	; 5
    PINB = 0x00;
  4a:	13 b8       	out	0x03, r1	; 3

    DDRC = 0B00000011;		// PC0->GSM_RST	PC1->GSM_PW
  4c:	83 e0       	ldi	r24, 0x03	; 3
  4e:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00000000;
  50:	18 b8       	out	0x08, r1	; 8
    PINC = 0x00;
  52:	16 b8       	out	0x06, r1	; 6

    DDRD = 0B00000000;
  54:	1a b8       	out	0x0a, r1	; 10
    PORTD= 0B00000000;
  56:	1b b8       	out	0x0b, r1	; 11
    PIND = 0x00;
  58:	19 b8       	out	0x09, r1	; 9
}
  5a:	08 95       	ret

0000005c <UartInit>:

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
  5c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
  60:	8c e0       	ldi	r24, 0x0C	; 12
  62:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
  66:	88 e9       	ldi	r24, 0x98	; 152
  68:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
  6c:	86 e0       	ldi	r24, 0x06	; 6
  6e:	80 93 c2 00 	sts	0x00C2, r24
}
  72:	08 95       	ret

00000074 <U0Send>:

void U0Send(unsigned char* data,unsigned char len)
{
  74:	58 2f       	mov	r21, r24
  76:	28 2f       	mov	r18, r24
  78:	39 2f       	mov	r19, r25
  7a:	f9 01       	movw	r30, r18
  7c:	07 c0       	rjmp	.+14     	; 0x8c <U0Send+0x18>
    unsigned char i;
    for(i=0; i<len; i++)
    {
        while(!(UCSR0A & (1 << UDRE0)));
  7e:	80 91 c0 00 	lds	r24, 0x00C0
  82:	85 ff       	sbrs	r24, 5
  84:	fc cf       	rjmp	.-8      	; 0x7e <U0Send+0xa>
        UDR0 = *(data++);
  86:	81 91       	ld	r24, Z+
  88:	80 93 c6 00 	sts	0x00C6, r24
}

void U0Send(unsigned char* data,unsigned char len)
{
    unsigned char i;
    for(i=0; i<len; i++)
  8c:	8e 2f       	mov	r24, r30
  8e:	85 1b       	sub	r24, r21
  90:	86 17       	cp	r24, r22
  92:	a8 f3       	brcs	.-22     	; 0x7e <U0Send+0xa>
    {
        while(!(UCSR0A & (1 << UDRE0)));
        UDR0 = *(data++);
    }

}
  94:	08 95       	ret

00000096 <main>:


int main(void)
{
	PortInit();
  96:	d7 df       	rcall	.-82     	; 0x46 <PortInit>
  98:	80 e1       	ldi	r24, 0x10	; 16
  9a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	28 ec       	ldi	r18, 0xC8	; 200
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0xa>
	_delay_ms(1000);
	PORTC |= 0x02;
  aa:	41 9a       	sbi	0x08, 1	; 8
  ac:	80 ef       	ldi	r24, 0xF0	; 240
  ae:	95 e5       	ldi	r25, 0x55	; 85
  b0:	28 ec       	ldi	r18, 0xC8	; 200
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <main+0x1e>
	_delay_ms(2200);
	PORTC &= ~0x02;
  be:	41 98       	cbi	0x08, 1	; 8
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x2a>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
