
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000061  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000043f  00000000  00000000  00000429  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001de  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000032c  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000114  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b3  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000010ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 eb       	ldi	r30, 0xB4	; 180
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 38       	cpi	r26, 0x80	; 128
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>
  56:	49 d0       	rcall	.+146    	; 0xea <main>
  58:	ab c0       	rjmp	.+342    	; 0x1b0 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <PortInit>:
#define B_LED_ON	PORTD|=(1<<4)
#define B_LED_OFF	PORTD&=~(1<<4)

void PortInit(void) 
{
	DDRB =  0B00000110;
  5c:	86 e0       	ldi	r24, 0x06	; 6
  5e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0B00000000;
  60:	15 b8       	out	0x05, r1	; 5
	PINB =	0x00;
  62:	13 b8       	out	0x03, r1	; 3

	DDRC =  0B00000110;		// PC1(GSM_PW),PC2(GSM_RST)
  64:	87 b9       	out	0x07, r24	; 7
	PORTC = 0B00000000;
  66:	18 b8       	out	0x08, r1	; 8
	PINC =	0x00;
  68:	16 b8       	out	0x06, r1	; 6
	
	DDRD =  0B00010000;		// PD4(KEY1)
  6a:	80 e1       	ldi	r24, 0x10	; 16
  6c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0B00000000;
  6e:	1b b8       	out	0x0b, r1	; 11
	PIND =	0x00;
  70:	19 b8       	out	0x09, r1	; 9
}
  72:	08 95       	ret

00000074 <UartInit>:
void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
  74:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
  78:	83 e0       	ldi	r24, 0x03	; 3
  7a:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
  7e:	88 e9       	ldi	r24, 0x98	; 152
  80:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
  84:	86 e0       	ldi	r24, 0x06	; 6
  86:	80 93 c2 00 	sts	0x00C2, r24
}
  8a:	08 95       	ret

0000008c <U0Send>:
void U0Send(unsigned char* data,unsigned char len)
{
  8c:	58 2f       	mov	r21, r24
  8e:	28 2f       	mov	r18, r24
  90:	39 2f       	mov	r19, r25
  92:	f9 01       	movw	r30, r18
  94:	07 c0       	rjmp	.+14     	; 0xa4 <U0Send+0x18>
    unsigned char i;
    for(i=0; i<len; i++)
    {
        while(!(UCSR0A & (1 << UDRE0)));
  96:	80 91 c0 00 	lds	r24, 0x00C0
  9a:	85 ff       	sbrs	r24, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <U0Send+0xa>
        UDR0 = *(data++);
  9e:	81 91       	ld	r24, Z+
  a0:	80 93 c6 00 	sts	0x00C6, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
}
void U0Send(unsigned char* data,unsigned char len)
{
    unsigned char i;
    for(i=0; i<len; i++)
  a4:	8e 2f       	mov	r24, r30
  a6:	85 1b       	sub	r24, r21
  a8:	86 17       	cp	r24, r22
  aa:	a8 f3       	brcs	.-22     	; 0x96 <U0Send+0xa>
    {
        while(!(UCSR0A & (1 << UDRE0)));
        UDR0 = *(data++);
    }
}
  ac:	08 95       	ret

000000ae <BLink>:
void BLink(unsigned char times)
{
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	50 e0       	ldi	r21, 0x00	; 0
	int i = 0;
	for(i=0;i<times;i++)
  b2:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	68 ec       	ldi	r22, 0xC8	; 200
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	14 c0       	rjmp	.+40     	; 0xe2 <BLink+0x34>
	{
		A_LED_ON;
  ba:	41 9a       	sbi	0x08, 1	; 8
  bc:	20 ea       	ldi	r18, 0xA0	; 160
  be:	3f e0       	ldi	r19, 0x0F	; 15
  c0:	fb 01       	movw	r30, r22
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <BLink+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d1 f7       	brne	.-12     	; 0xc0 <BLink+0x12>
		_delay_ms(400);
		A_LED_OFF;
  cc:	41 98       	cbi	0x08, 1	; 8
  ce:	20 ea       	ldi	r18, 0xA0	; 160
  d0:	3f e0       	ldi	r19, 0x0F	; 15
  d2:	fb 01       	movw	r30, r22
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <BLink+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  dc:	d1 f7       	brne	.-12     	; 0xd2 <BLink+0x24>
    }
}
void BLink(unsigned char times)
{
	int i = 0;
	for(i=0;i<times;i++)
  de:	4f 5f       	subi	r20, 0xFF	; 255
  e0:	5f 4f       	sbci	r21, 0xFF	; 255
  e2:	48 17       	cp	r20, r24
  e4:	59 07       	cpc	r21, r25
  e6:	4c f3       	brlt	.-46     	; 0xba <BLink+0xc>
		A_LED_ON;
		_delay_ms(400);
		A_LED_OFF;
		_delay_ms(400);
	}
}
  e8:	08 95       	ret

000000ea <main>:


 
int main(void)
{
	cli();
  ea:	f8 94       	cli
	PortInit();
  ec:	b7 df       	rcall	.-146    	; 0x5c <PortInit>
	PORTD = 0B00000000;
	PIND =	0x00;
}
void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
  ee:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
  f8:	88 e9       	ldi	r24, 0x98	; 152
  fa:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 c2 00 	sts	0x00C2, r24
 104:	80 ed       	ldi	r24, 0xD0	; 208
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x1e>
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	9a ee       	ldi	r25, 0xEA	; 234
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	28 ec       	ldi	r18, 0xC8	; 200
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x2c>
 11a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	d9 f7       	brne	.-10     	; 0x114 <main+0x2a>
	cli();
	PortInit();
	UartInit();
	_delay_ms(1);
	_delay_ms(6000);
	PORTC|=0x02;
 11e:	41 9a       	sbi	0x08, 1	; 8
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	9e e4       	ldi	r25, 0x4E	; 78
 124:	28 ec       	ldi	r18, 0xC8	; 200
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0x3e>
	_delay_ms(2000);
	PORTC&=~0x02;
 132:	41 98       	cbi	0x08, 1	; 8
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x4a>

00000136 <InitGSM>:
};


void InitGSM(void)
{
	U0Send(AT_INS[CON_SER],strlen(AT_INS[CON_SER]));
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	fc 01       	movw	r30, r24
 13c:	01 90       	ld	r0, Z+
 13e:	00 20       	and	r0, r0
 140:	e9 f7       	brne	.-6      	; 0x13c <InitGSM+0x6>
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	e8 1b       	sub	r30, r24
 146:	f9 0b       	sbc	r31, r25
 148:	6e 2f       	mov	r22, r30
 14a:	a0 df       	rcall	.-192    	; 0x8c <U0Send>
 14c:	80 ea       	ldi	r24, 0xA0	; 160
 14e:	9f e0       	ldi	r25, 0x0F	; 15
 150:	28 ec       	ldi	r18, 0xC8	; 200
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <InitGSM+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15c:	d9 f7       	brne	.-10     	; 0x154 <InitGSM+0x1e>
	_delay_ms(400);
	U0Send(AT_INS[SAVE],strlen(AT_INS[SAVE]));
 15e:	a0 e4       	ldi	r26, 0x40	; 64
 160:	b1 e0       	ldi	r27, 0x01	; 1
 162:	fd 01       	movw	r30, r26
 164:	01 90       	ld	r0, Z+
 166:	00 20       	and	r0, r0
 168:	e9 f7       	brne	.-6      	; 0x164 <InitGSM+0x2e>
 16a:	e1 54       	subi	r30, 0x41	; 65
 16c:	f1 40       	sbci	r31, 0x01	; 1
 16e:	cd 01       	movw	r24, r26
 170:	6e 2f       	mov	r22, r30
 172:	8c df       	rcall	.-232    	; 0x8c <U0Send>
 174:	80 ea       	ldi	r24, 0xA0	; 160
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	28 ec       	ldi	r18, 0xC8	; 200
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <InitGSM+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	d9 f7       	brne	.-10     	; 0x17c <InitGSM+0x46>
	_delay_ms(400);
	U0Send(AT_INS[RESTART],strlen(AT_INS[RESTART]));
 186:	a0 e8       	ldi	r26, 0x80	; 128
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	fd 01       	movw	r30, r26
 18c:	01 90       	ld	r0, Z+
 18e:	00 20       	and	r0, r0
 190:	e9 f7       	brne	.-6      	; 0x18c <InitGSM+0x56>
 192:	e1 58       	subi	r30, 0x81	; 129
 194:	f1 40       	sbci	r31, 0x01	; 1
 196:	cd 01       	movw	r24, r26
 198:	6e 2f       	mov	r22, r30
 19a:	78 df       	rcall	.-272    	; 0x8c <U0Send>
 19c:	80 ea       	ldi	r24, 0xA0	; 160
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	28 ec       	ldi	r18, 0xC8	; 200
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <InitGSM+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <InitGSM+0x6e>
	_delay_ms(400);
}
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
