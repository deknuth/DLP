
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000047  00800100  00800100  000002d2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d3  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f2  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cc  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f8  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012a  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000019b  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	78 c0       	rjmp	.+240    	; 0xf4 <__vector_1>
   4:	86 c0       	rjmp	.+268    	; 0x112 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	8d c0       	rjmp	.+282    	; 0x140 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 34       	cpi	r26, 0x47	; 71
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	b5 d0       	rcall	.+362    	; 0x1bc <main>
  52:	03 c1       	rjmp	.+518    	; 0x25a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <PortInit>:
#define LED_OFF	PORTD|=0x10
#define LED_ON	PORTD&=~0x10

void PortInit(void) 
{
	DDRB =  0B00000110;
  56:	86 e0       	ldi	r24, 0x06	; 6
  58:	84 b9       	out	0x04, r24	; 4
	PORTB = 0B00000000;
  5a:	15 b8       	out	0x05, r1	; 5
	PINB =	0x00;
  5c:	13 b8       	out	0x03, r1	; 3

	DDRC =  0B00110110;		// PC1(GSM_PW),PC2(GSM_RST)
  5e:	86 e3       	ldi	r24, 0x36	; 54
  60:	87 b9       	out	0x07, r24	; 7
	PORTC = 0B00000000;
  62:	18 b8       	out	0x08, r1	; 8
	PINC =	0x00;
  64:	16 b8       	out	0x06, r1	; 6
	
	DDRD =  0B00010000;		// PD4(LED)
  66:	80 e1       	ldi	r24, 0x10	; 16
  68:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0B00010000;
  6a:	8b b9       	out	0x0b, r24	; 11
	PIND =	0x00;
  6c:	19 b8       	out	0x09, r1	; 9
}
  6e:	08 95       	ret

00000070 <IntInit>:

void IntInit(void)
{
    EICRA = 0x0F;
  70:	8f e0       	ldi	r24, 0x0F	; 15
  72:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0x03;
  76:	83 e0       	ldi	r24, 0x03	; 3
  78:	8d bb       	out	0x1d, r24	; 29
}
  7a:	08 95       	ret

0000007c <UartInit>:

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
  7c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
  80:	83 e3       	ldi	r24, 0x33	; 51
  82:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
  86:	88 e9       	ldi	r24, 0x98	; 152
  88:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
  8c:	86 e0       	ldi	r24, 0x06	; 6
  8e:	80 93 c2 00 	sts	0x00C2, r24
}
  92:	08 95       	ret

00000094 <U0Send>:

void U0Send(unsigned char* data,unsigned char len)
{
  94:	58 2f       	mov	r21, r24
  96:	28 2f       	mov	r18, r24
  98:	39 2f       	mov	r19, r25
  9a:	f9 01       	movw	r30, r18
  9c:	07 c0       	rjmp	.+14     	; 0xac <U0Send+0x18>
    unsigned char i;
    for(i=0; i<len; i++)
    {
        while(!(UCSR0A & (1 << UDRE0)));
  9e:	80 91 c0 00 	lds	r24, 0x00C0
  a2:	85 ff       	sbrs	r24, 5
  a4:	fc cf       	rjmp	.-8      	; 0x9e <U0Send+0xa>
        UDR0 = *(data++);
  a6:	81 91       	ld	r24, Z+
  a8:	80 93 c6 00 	sts	0x00C6, r24
}

void U0Send(unsigned char* data,unsigned char len)
{
    unsigned char i;
    for(i=0; i<len; i++)
  ac:	8e 2f       	mov	r24, r30
  ae:	85 1b       	sub	r24, r21
  b0:	86 17       	cp	r24, r22
  b2:	a8 f3       	brcs	.-22     	; 0x9e <U0Send+0xa>
    {
        while(!(UCSR0A & (1 << UDRE0)));
        UDR0 = *(data++);
    }
}
  b4:	08 95       	ret

000000b6 <BLink>:

void BLink(unsigned char times)
{
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	50 e0       	ldi	r21, 0x00	; 0
	int i = 0;
	for(i=0;i<times;i++)
  ba:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	68 ec       	ldi	r22, 0xC8	; 200
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	14 c0       	rjmp	.+40     	; 0xea <BLink+0x34>
	{
		LED_ON;
  c2:	5c 98       	cbi	0x0b, 4	; 11
  c4:	28 eb       	ldi	r18, 0xB8	; 184
  c6:	3b e0       	ldi	r19, 0x0B	; 11
  c8:	fb 01       	movw	r30, r22
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <BLink+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d1 f7       	brne	.-12     	; 0xc8 <BLink+0x12>
		_delay_ms(300);
		LED_OFF;
  d4:	5c 9a       	sbi	0x0b, 4	; 11
  d6:	28 eb       	ldi	r18, 0xB8	; 184
  d8:	3b e0       	ldi	r19, 0x0B	; 11
  da:	fb 01       	movw	r30, r22
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <BLink+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e4:	d1 f7       	brne	.-12     	; 0xda <BLink+0x24>
}

void BLink(unsigned char times)
{
	int i = 0;
	for(i=0;i<times;i++)
  e6:	4f 5f       	subi	r20, 0xFF	; 255
  e8:	5f 4f       	sbci	r21, 0xFF	; 255
  ea:	48 17       	cp	r20, r24
  ec:	59 07       	cpc	r21, r25
  ee:	4c f3       	brlt	.-46     	; 0xc2 <BLink+0xc>
		LED_ON;
		_delay_ms(300);
		LED_OFF;
		_delay_ms(300);
	}
	LED_OFF;
  f0:	5c 9a       	sbi	0x0b, 4	; 11
}
  f2:	08 95       	ret

000000f4 <__vector_1>:

volatile unsigned char flag = 0;
volatile unsigned char key = 0;
ISR(INT0_vect)		// 上锁
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
	key = 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 01 01 	sts	0x0101, r24
}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_2>:

ISR(INT1_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	if(flag++ > 200)
 11e:	80 91 00 01 	lds	r24, 0x0100
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 00 01 	sts	0x0100, r24
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	89 3c       	cpi	r24, 0xC9	; 201
 12c:	18 f0       	brcs	.+6      	; 0x134 <__vector_2+0x22>
		flag = 200;
 12e:	88 ec       	ldi	r24, 0xC8	; 200
 130:	80 93 00 01 	sts	0x0100, r24
}
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_18>:
volatile unsigned char U0Ready = 0;
unsigned char U0Buf[64] = {0};
volatile unsigned char U0Count = 0;

ISR(USART_RX_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	LED_BLINK;
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	90 e1       	ldi	r25, 0x10	; 16
 156:	89 27       	eor	r24, r25
 158:	8b b9       	out	0x0b, r24	; 11
	word =UDR0;
 15a:	90 91 c6 00 	lds	r25, 0x00C6
 15e:	90 93 02 01 	sts	0x0102, r25
	if(word == 0xFE)
 162:	9e 3f       	cpi	r25, 0xFE	; 254
 164:	39 f4       	brne	.+14     	; 0x174 <__vector_18+0x34>
	{
		if(!U0Ready)
 166:	80 91 05 01 	lds	r24, 0x0105
 16a:	88 23       	and	r24, r24
 16c:	19 f4       	brne	.+6      	; 0x174 <__vector_18+0x34>
			start = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 03 01 	sts	0x0103, r24
	}
	if(start)
 174:	80 91 03 01 	lds	r24, 0x0103
 178:	88 23       	and	r24, r24
 17a:	b9 f0       	breq	.+46     	; 0x1aa <__vector_18+0x6a>
	{
		U0Buf[U0Count++] = word;
 17c:	80 91 46 01 	lds	r24, 0x0146
 180:	e8 2f       	mov	r30, r24
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ea 5f       	subi	r30, 0xFA	; 250
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	90 83       	st	Z, r25
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 46 01 	sts	0x0146, r24
		if(U0Count == 4)
 190:	80 91 46 01 	lds	r24, 0x0146
 194:	84 30       	cpi	r24, 0x04	; 4
 196:	49 f4       	brne	.+18     	; 0x1aa <__vector_18+0x6a>
		{
			U0Ready = 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 05 01 	sts	0x0105, r24
			start = zLen = 0;
 19e:	10 92 04 01 	sts	0x0104, r1
 1a2:	80 91 04 01 	lds	r24, 0x0104
 1a6:	80 93 03 01 	sts	0x0103, r24
		}
	}
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <main>:

int main(void)
{
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
	cli();
 1c0:	f8 94       	cli
	PortInit();
 1c2:	49 df       	rcall	.-366    	; 0x56 <PortInit>
	EIMSK = 0x03;
}

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
 1c4:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
 1c8:	83 e3       	ldi	r24, 0x33	; 51
 1ca:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
 1ce:	88 e9       	ldi	r24, 0x98	; 152
 1d0:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	80 93 c2 00 	sts	0x00C2, r24
	PIND =	0x00;
}

void IntInit(void)
{
    EICRA = 0x0F;
 1da:	8f e0       	ldi	r24, 0x0F	; 15
 1dc:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0x03;
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	8d bb       	out	0x1d, r24	; 29
{
	cli();
	PortInit();
	UartInit();
	IntInit();
	sei();
 1e4:	78 94       	sei
	BLink(2);
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	66 df       	rcall	.-308    	; 0xb6 <BLink>
 1ea:	80 ed       	ldi	r24, 0xD0	; 208
 1ec:	97 e0       	ldi	r25, 0x07	; 7
 1ee:	28 ec       	ldi	r18, 0xC8	; 200
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fa:	d9 f7       	brne	.-10     	; 0x1f2 <main+0x36>
	_delay_ms(200);
	PORTC|=0x02;
 1fc:	41 9a       	sbi	0x08, 1	; 8
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	9e e4       	ldi	r25, 0x4E	; 78
 202:	28 ec       	ldi	r18, 0xC8	; 200
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20e:	d9 f7       	brne	.-10     	; 0x206 <main+0x4a>
	_delay_ms(2000);
	PORTC&=~0x02;
 210:	41 98       	cbi	0x08, 1	; 8
 212:	c8 ec       	ldi	r28, 0xC8	; 200
 214:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(;;)
	{
		if(U0Ready)
 216:	80 91 05 01 	lds	r24, 0x0105
 21a:	88 23       	and	r24, r24
 21c:	61 f0       	breq	.+24     	; 0x236 <main+0x7a>
		{
			U0Ready=U0Count=0;
 21e:	10 92 46 01 	sts	0x0146, r1
 222:	80 91 46 01 	lds	r24, 0x0146
 226:	80 93 05 01 	sts	0x0105, r24
			if(PIND&0x04)
 22a:	4a 9b       	sbis	0x09, 2	; 9
 22c:	04 c0       	rjmp	.+8      	; 0x236 <main+0x7a>
			{
				key = 0;
 22e:	10 92 01 01 	sts	0x0101, r1
				MOT_P;
 232:	44 98       	cbi	0x08, 4	; 8
 234:	45 9a       	sbi	0x08, 5	; 8
			}
		}
		if(flag)
 236:	80 91 00 01 	lds	r24, 0x0100
 23a:	88 23       	and	r24, r24
 23c:	61 f3       	breq	.-40     	; 0x216 <main+0x5a>
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	97 e2       	ldi	r25, 0x27	; 39
 242:	fe 01       	movw	r30, r28
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 248:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24a:	d9 f7       	brne	.-10     	; 0x242 <main+0x86>
		{
			_delay_ms(1000);
			MOT_STOP;
 24c:	44 98       	cbi	0x08, 4	; 8
 24e:	45 98       	cbi	0x08, 5	; 8
			BLink(3);
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	31 df       	rcall	.-414    	; 0xb6 <BLink>
			flag = 0;
 254:	10 92 00 01 	sts	0x0100, r1
 258:	de cf       	rjmp	.-68     	; 0x216 <main+0x5a>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
